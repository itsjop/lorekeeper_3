.modal-backdrop {
  display: none;
}
#confirmationModal {
  &.show {
    opacity: 1;
  }
  &.fade:not(.show) {
    display: none;
    pointer-events: none;
    user-select: none;
  }
}
dialog,
.modal {
  z-index: 999;
  position: fixed;
  left: 50%;
  top: 50%;
  width: auto;
  height: auto;
  transform: translate(-50%, -50%);
  max-height: 70vh;
  background: transparent;
  border: 0;
  opacity: 0;
  background-color: var(--purple-clr_400);
  box-shadow: 5px 5px 5px #cccccc88;
  border-radius: 15px;
  transition:
    opacity 0.7s ease-out,
    transform 0.7s ease-out,
    overlay 0.7s ease-out allow-discrete,
    display 0.7s ease-out allow-discrete;
  /* Equivalent to
  transition: all 0.7s allow-discrete; */
  &::backdrop {
    background-color: rgb(0 0 0 / 50%);
    transition:
      display 0.7s allow-discrete,
      overlay 0.7s allow-discrete,
      background-color 0.7s;
    /* Equivalent to
    transition: all 0.7s allow-discrete; */
  }
  /* Open state of the dialog  */
  &:open {
    opacity: 1;
    // transform: translate(-50%, -50%) scale(1);
  }
  .modal-dialog {
    max-height: calc(70vh - 40px);
    margin: 0;
    overflow-y: scroll;
    .modal-content {
      border-radius: 15px;
    }
  }

}

/* Before open state  */
/* Needs to be after the previous dialog:open rule to take effect,
    as the specificity is the same */
@starting-style {
  dialog:open {
    opacity: 0;
    // transform: translate(-50%, -50%) scale(0);
  }
}

/* Transition the :backdrop when the dialog modal is promoted to the top layer */
::backdrop {
  background-color: rgb(0 0 0 / 25%);
}

/* This starting-style rule cannot be nested inside the above selector
because the nesting selector cannot represent pseudo-elements. */

@starting-style {
  dialog:open::backdrop {
    background-color: rgb(0 0 0 / 100%);
  }
}
